{"version":3,"sources":["../../../apiserver_dev/dao/detail/get.js"],"names":["Get","params","conditions","columns","options","sort","currentPage","pageSize","modelName","Model","getDBEngine","exeObj","find","skip","limit","exec","id","findById","findOne","_id","count","field","distinct","datas","populate","groupConditions","aggregate","append","$project","match","group"],"mappings":"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","file":"get.js","sourcesContent":["import baseDAO from './baseDAO'\r\nimport _ from 'lodash'\r\n\r\nexport default class Get extends baseDAO {\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n    /* 按条件查询数据 */\r\n    find(params) {\r\n        let {conditions, columns, options, sort, currentPage, pageSize, modelName} = params;\r\n        let Model = this.getDBEngine(modelName);\r\n        let exeObj = Model.find(conditions, columns, options);\r\n        if(currentPage && pageSize) {\r\n            exeObj.skip((currentPage - 1) * pageSize).limit(pageSize);\r\n        }\r\n        if (sort) {\r\n            exeObj.sort(sort);\r\n        }\r\n        return exeObj.exec();\r\n    }\r\n\r\n    /* 按ID查询单条数据 */\r\n    findById(params) {\r\n        let {id, columns, options, modelName} = params;\r\n        let Model = this.getDBEngine(modelName);\r\n        let exeObj = Model.findById(id, columns, options);\r\n        return exeObj.exec();\r\n    }\r\n\r\n    /* 按条件查询单条数据 */\r\n    findOne(params) {\r\n        let {conditions, columns, options, modelName} = params;\r\n        let Model = this.getDBEngine(modelName);\r\n        let exeObj = Model.findOne(conditions, columns, options);\r\n        return exeObj.exec();\r\n    }\r\n\r\n    /* 按条件查询最后一条数据 */\r\n    findLastOne(params) {\r\n        let {conditions, columns, options, modelName} = params;\r\n        let Model = this.getDBEngine(modelName);\r\n        let exeObj = Model.find(conditions, columns, options).sort({_id:-1}).skip(0).limit(1);\r\n        return exeObj.exec();\r\n    }\r\n\r\n    /* 按传入条件统计数据条数 */\r\n    totalCount(params) {\r\n        let {conditions, modelName} = params;\r\n        let Model = this.getDBEngine(modelName);\r\n        let exeObj = Model.count(conditions);\r\n        return exeObj.exec();\r\n    }\r\n\r\n    /* 去重复 */\r\n    distinct(params) {\r\n        let {conditions, field, modelName} = params;\r\n        let Model = this.getDBEngine(modelName);\r\n        return Model.distinct(field, conditions).exec();\r\n    }\r\n\r\n    /* 按传入数据和配置进行关联操作 */\r\n    populated(params) {\r\n        let {datas, options, modelName} = params;\r\n        let Model = this.getDBEngine(modelName);\r\n        return Model.populate(datas, options);\r\n    }\r\n\r\n    /* 复杂操作，分组聚合计算等处理 */\r\n    aggregate(params) {\r\n        let {conditions, columns, groupConditions, currentPage, pageSize, sort, modelName} = params;\r\n        let Model = this.getDBEngine(modelName);\r\n        let exeObj = Model.aggregate().append({$project: columns}).match(conditions)\r\n\r\n        if(groupConditions) {\r\n            exeObj.group(groupConditions);\r\n        }\r\n        if(sort) {\r\n            exeObj.sort(sort)\r\n        }\r\n        if(currentPage && pageSize) {\r\n            exeObj.skip((currentPage - 1) * pageSize).limit(pageSize)\r\n        }\r\n        return exeObj.exec()\r\n    }\r\n}"]}
{"version":3,"sources":["../../../apiserver_dev/controllers/detail/source.js"],"names":["SourceController","saveSource","ctx","next","list","request","body","currTime","Date","getTime","obj","assignIn","type","parseInt","created","modified","params","dataArr","sourceService","getErrorNotice","sourceList","query","start","limit","conditions","columns","_id","url","sort","result","datas","isArray","length","data","uploadSource","uploadService","file","files","uploadfile","upload","path","Location"],"mappings":"ucAAA,gC;AACA,6C;AACA;AACA,wB;AACA,4B;;AAEA,IAAIA,mBAAmB,SAAnBA,gBAAmB,GAAW;AAC9B,QAAG,EAAE,gBAAgBA,gBAAlB,CAAH,EAAwC;AACpC,eAAO,IAAIA,gBAAJ,EAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAKC,UAAL,GAAkB,YAAW;AACzB,kGAAO,iBAAOC,GAAP,EAAYC,IAAZ;AACEC,oCADF,GACUF,IAAIG,OAAJ,CAAYC,IADtB,CACEF,IADF;;AAGGG,wCAHH,GAGc,IAAIC,IAAJ,GAAWC,OAAX,EAHd;AAIH,4EAAeL,IAAf,qGAAqB,CAAbM,GAAa;AACjB,qDAAEC,QAAF,CAAWD,GAAX,EAAgB,EAACE,MAAMC,SAASH,IAAIE,IAAb,CAAP,EAA2BE,SAASP,QAApC,EAA8CQ,UAAUR,QAAxD,EAAhB;AACH,iCANE;;AAQCS,sCARD,GAQU;AACTC,6CAASb,IADA,EARV;;;AAYGc,6CAZH,GAYmB,sBAZnB;AAaGA,kDAAcjB,UAAd,CAAyBe,MAAzB,CAbH;AAcHd,oCAAII,IAAJ,GAAW,iBAAOa,cAAP,CAAsB,SAAtB,CAAX,CAdG,iGAAP;;AAgBH,KAjBD;;AAmBA,SAAKC,UAAL,GAAkB,YAAW;AACzB,mGAAO,kBAAOlB,GAAP,EAAYC,IAAZ;AACwBD,oCAAImB,KAD5B,EACET,IADF,cACEA,IADF,EACQU,KADR,cACQA,KADR,EACeC,KADf,cACeA,KADf;;AAGCP,sCAHD,GAGU;AACTQ,gDAAY;AACRZ,8CAAMC,SAASD,IAAT,CADE,EADH;;AAITa,6CAAS;AACLC,6CAAI,CADC;AAELC,6CAAI,CAFC,EAJA;;AAQTL,2CAAOT,SAASS,KAAT,CARE;AASTC,2CAAOV,SAASU,KAAT,CATE;AAUTK,0CAAM;AACFb,kDAAU,CAAC,CADT,EAVG,EAHV;;;AAiBGG,6CAjBH,GAiBmB,sBAjBnB;;AAmBCW,sCAnBD;AAoBeX,kDAAcE,UAAd,CAAyBJ,MAAzB,CApBf,SAoBCc,KApBD;AAqBH,oCAAG,iBAAEC,OAAF,CAAUD,KAAV,KAAoBA,MAAME,MAAN,GAAe,CAAtC,EAAyC;AACrCH,6CAAS,iBAAElB,QAAF,CAAW,EAACsB,MAAKH,KAAN,EAAX,EAAyB,iBAAOX,cAAP,CAAsB,SAAtB,CAAzB,CAAT;AACH,iCAFD,MAEO;AACHU,6CAAS,iBAAElB,QAAF,CAAW,EAACsB,MAAK,EAAN,EAAX,EAAsB,iBAAOd,cAAP,CAAsB,SAAtB,CAAtB,CAAT;AACH;AACDjB,oCAAII,IAAJ,GAAWuB,MAAX,CA1BG,kEAAP;;AA4BH,KA7BD;;AA+BA,SAAKK,YAAL,GAAoB,YAAW;AAC3B,mGAAO,kBAAOhC,GAAP,EAAYC,IAAZ;;AAEGgC,6CAFH,GAEmB,yBAFnB;AAGCC,oCAHD,GAGQlC,IAAIG,OAAJ,CAAYgC,KAAZ,CAAkB,CAAlB,CAHR;AAIgBF,kDAAcG,UAAd,CAAyBF,IAAzB,CAJhB,SAICG,MAJD;AAKHrC,oCAAII,IAAJ,GAAW,iBAAEK,QAAF,CAAW,EAAC6B,MAAMD,OAAOE,QAAP,IAAiB,EAAxB,EAAX,EAAwC,iBAAOtB,cAAP,CAAsB,SAAtB,CAAxC,CAAX,CALG,kEAAP;;AAOH,KARD;AASH,CArFD,C;;AAuFenB,gB","file":"source.js","sourcesContent":["import _ from 'lodash'\r\nimport retMsg from '../../common/retMsg'\r\nimport {Source, AliUpload} from '../../services'\r\nimport fs from 'fs'\r\nimport path from 'path'\r\n\r\nlet SourceController = function() {\r\n    if(!(this instanceof SourceController)) {\r\n        return new SourceController()\r\n    }\r\n\r\n    /**\r\n     * 保存上传资源信息 post\r\n     * URL /api/source/save\r\n     * params:\r\n     *          list\r\n     *\r\n     * list的值举例：\r\n     *\r\n     *      [\r\n     *          {name:'图片标题1', type:1, url:'http://xxxxxxx', description:'这里是图片描述1'},\r\n                {name:'图片标题2', type:1, url:'http://yyyyyyy', description:'这里是图片描述2'}\r\n     *      ]\r\n     *\r\n     * 说明：\r\n     *      name 资源标题\r\n     *      type 资源类型： 1图片， 2视频\r\n     *      url 图片在阿里云的路径\r\n     *      description 图片描述\r\n     *\r\n     * return {errcode:xxx, errmsg:xxx}\r\n     */\r\n    this.saveSource = function() {\r\n        return async (ctx, next) => {\r\n            let {list} = ctx.request.body\r\n\r\n            const currTime = new Date().getTime()\r\n            for(let obj of list) {\r\n                _.assignIn(obj, {type: parseInt(obj.type), created: currTime, modified: currTime})\r\n            }\r\n            \r\n            let params = {\r\n                dataArr: list\r\n            }\r\n\r\n            const sourceService = new Source()\r\n            await sourceService.saveSource(params)\r\n            ctx.body = retMsg.getErrorNotice('SUCCESS')\r\n        }\r\n    }\r\n\r\n    this.sourceList = function() {\r\n        return async (ctx, next) => {\r\n            let {type, start, limit} = ctx.query\r\n\r\n            let params = {\r\n                conditions: {\r\n                    type: parseInt(type)\r\n                },\r\n                columns: {\r\n                    _id:1,\r\n                    url:1\r\n                }, \r\n                start: parseInt(start),\r\n                limit: parseInt(limit),\r\n                sort: {\r\n                    modified: -1\r\n                }\r\n            }\r\n            const sourceService = new Source()\r\n\r\n            let result\r\n            let datas = await sourceService.sourceList(params)\r\n            if(_.isArray(datas) && datas.length > 0) {\r\n                result = _.assignIn({data:datas}, retMsg.getErrorNotice('SUCCESS'))\r\n            } else {\r\n                result = _.assignIn({data:[]}, retMsg.getErrorNotice('SUCCESS'))\r\n            }\r\n            ctx.body = result\r\n        }\r\n    }\r\n\r\n    this.uploadSource = function() {\r\n        return async (ctx, next) => {\r\n\r\n            const uploadService = new AliUpload()\r\n            let file = ctx.request.files[0]\r\n            let upload = await uploadService.uploadfile(file)\r\n            ctx.body = _.assignIn({path: upload.Location||\"\"}, retMsg.getErrorNotice('SUCCESS'))\r\n        }\r\n    }\r\n}\r\n\r\nexport default SourceController"]}
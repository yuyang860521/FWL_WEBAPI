{"version":3,"sources":["../../../apiserver_dev/controllers/detail/source.js"],"names":["SourceController","saveSource","ctx","next","request","body","name","column","desc","pathstr","type","currTime","Date","getTime","arr","split","i","length","url","parseInt","description","created","modified","params","dataArr","sourceService","getErrorNotice","sourceList","query","start","limit","conditions","columns","_id","sort","result","datas","isArray","assignIn","data","uploadSource","uploadService","file","files","source","uploadfile","upload","path","Location"],"mappings":"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","file":"source.js","sourcesContent":["import _ from 'lodash'\r\nimport retMsg from '../../common/retMsg'\r\nimport {Source, AliUpload} from '../../services'\r\nimport fs from 'fs'\r\nimport path from 'path'\r\n\r\nlet SourceController = function() {\r\n    if(!(this instanceof SourceController)) {\r\n        return new SourceController()\r\n    }\r\n\r\n    /**\r\n     * 保存上传资源信息 post\r\n     * URL /api/source/save\r\n     * params:\r\n     *          name\r\n     *          column\r\n     *          desc\r\n     *          pathstr \r\n     *          type\r\n     *\r\n     *\r\n     * 说明：\r\n     *      name 资源标题\r\n     *      column 图片所属栏目\r\n     *      type 资源类型： 1图片， 2视频\r\n     *      pathstr 图片在阿里云的路径字符串，多张图以逗号分隔\r\n     *      desc 图片描述\r\n     *\r\n     * return {errcode:xxx, errmsg:xxx}\r\n     */\r\n    this.saveSource = function() {\r\n        return async (ctx, next) => {\r\n            let {name, column, desc, pathstr, type} = ctx.request.body\r\n\r\n            const currTime = new Date().getTime()\r\n            let arr = pathstr.split(\",\")\r\n            for(let i=0; i<arr.length; i++) {\r\n                if(arr[i]) {\r\n                    arr[i] = {name: name, url: arr[i], column: parseInt(column), type: parseInt(type), description: desc, created: currTime, modified: currTime}\r\n                }\r\n            }\r\n            \r\n            let params = {\r\n                dataArr: arr\r\n            }\r\n\r\n            const sourceService = new Source()\r\n            await sourceService.saveSource(params)\r\n            ctx.body = retMsg.getErrorNotice('SUCCESS')\r\n        }\r\n    }\r\n\r\n    this.sourceList = function() {\r\n        return async (ctx, next) => {\r\n            let {type, start, limit} = ctx.query\r\n\r\n            let params = {\r\n                conditions: {\r\n                    type: parseInt(type)\r\n                },\r\n                columns: {\r\n                    _id:1,\r\n                    url:1\r\n                }, \r\n                start: parseInt(start),\r\n                limit: parseInt(limit),\r\n                sort: {\r\n                    modified: -1\r\n                }\r\n            }\r\n            const sourceService = new Source()\r\n\r\n            let result\r\n            let datas = await sourceService.sourceList(params)\r\n            if(_.isArray(datas) && datas.length > 0) {\r\n                result = _.assignIn({data:datas}, retMsg.getErrorNotice('SUCCESS'))\r\n            } else {\r\n                result = _.assignIn({data:[]}, retMsg.getErrorNotice('SUCCESS'))\r\n            }\r\n            ctx.body = result\r\n        }\r\n    }\r\n\r\n    this.uploadSource = function() {\r\n        return async (ctx, next) => {\r\n\r\n            const uploadService = new AliUpload()\r\n            let file = ctx.request.files[0]\r\n            let source = ctx.query.source\r\n            let upload = await uploadService.uploadfile(file, source)\r\n            ctx.body = _.assignIn({path: upload.Location||\"\"}, retMsg.getErrorNotice('SUCCESS'))\r\n        }\r\n    }\r\n}\r\n\r\nexport default SourceController"]}
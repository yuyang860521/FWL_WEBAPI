{"version":3,"sources":["../../../apiserver_dev/controllers/detail/source.js"],"names":["SourceController","saveSource","ctx","next","request","body","name","column","desc","pathstr","type","currTime","Date","getTime","arr","split","i","length","url","parseInt","description","created","modified","params","dataArr","sourceService","getErrorNotice","sourceList","query","start","limit","conditions","status","columns","_id","currentPage","pageSize","sort","result","datas","isArray","totalCount","total","assignIn","data","uploadSource","uploadService","file","files","source","uploadfile","upload","path","Location","delSource","idarr","id","push","$in","updates","sourceGet","getSource","sourceUpdate","updateSource"],"mappings":"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","file":"source.js","sourcesContent":["import _ from 'lodash'\r\nimport retMsg from '../../common/retMsg'\r\nimport ObjectId from 'mongoose/lib/types/objectid'\r\nimport {Source, AliUpload} from '../../services'\r\nimport fs from 'fs'\r\nimport path from 'path'\r\n\r\nlet SourceController = function() {\r\n    if(!(this instanceof SourceController)) {\r\n        return new SourceController()\r\n    }\r\n\r\n    /**\r\n     * 保存上传资源信息 post\r\n     * URL /api/source/save\r\n     * params:\r\n     *          name\r\n     *          column\r\n     *          desc\r\n     *          pathstr \r\n     *          type\r\n     *\r\n     *\r\n     * 说明：\r\n     *      name 资源标题\r\n     *      column 图片所属栏目\r\n     *      type 资源类型： 1图片， 2视频\r\n     *      pathstr 图片在阿里云的路径字符串，多张图以逗号分隔\r\n     *      desc 图片描述\r\n     *\r\n     * return {errcode:xxx, errmsg:xxx}\r\n     */\r\n    this.saveSource = function() {\r\n        return async (ctx, next) => {\r\n            let {name, column, desc, pathstr, type} = ctx.request.body\r\n\r\n            const currTime = new Date().getTime()\r\n            let arr = pathstr.split(\",\")\r\n            for(let i=0; i<arr.length; i++) {\r\n                if(arr[i]) {\r\n                    arr[i] = {name: name, url: arr[i], column: parseInt(column), type: parseInt(type), description: desc, created: currTime, modified: currTime}\r\n                }\r\n            }\r\n            \r\n            let params = {\r\n                dataArr: arr\r\n            }\r\n\r\n            const sourceService = new Source()\r\n            await sourceService.saveSource(params)\r\n            ctx.body = retMsg.getErrorNotice('SUCCESS')\r\n        }\r\n    }\r\n\r\n    this.sourceList = function() {\r\n        return async (ctx, next) => {\r\n            let {type, start, limit} = ctx.query\r\n\r\n            let params = {\r\n                conditions: {\r\n                    type: parseInt(type),\r\n                    status: 1\r\n                },\r\n                columns: {\r\n                    _id:1,\r\n                    name:1,\r\n                    column:1,\r\n                    url:1,\r\n                    description:1,\r\n                    modified:1\r\n                }, \r\n                currentPage: parseInt(start),\r\n                pageSize: parseInt(limit),\r\n                sort: {\r\n                    modified: -1\r\n                }\r\n            }\r\n            const sourceService = new Source()\r\n\r\n            let result\r\n            let datas = await sourceService.sourceList(params)\r\n            if(_.isArray(datas) && datas.length > 0) {\r\n                const total = await sourceService.totalCount(params)\r\n\r\n                result = _.assignIn({data:datas, total:total}, retMsg.getErrorNotice('SUCCESS'))\r\n            } else {\r\n                result = _.assignIn({data:[]}, retMsg.getErrorNotice('SUCCESS'))\r\n            }\r\n            ctx.body = result\r\n        }\r\n    }\r\n\r\n    this.uploadSource = function() {\r\n        return async (ctx, next) => {\r\n\r\n            const uploadService = new AliUpload()\r\n            let file = ctx.request.files[0]\r\n            let source = ctx.query.source\r\n            let upload = await uploadService.uploadfile(file, source)\r\n            ctx.body = _.assignIn({path: upload.Location||\"\"}, retMsg.getErrorNotice('SUCCESS'))\r\n        }\r\n    }\r\n\r\n    this.delSource = function() {\r\n        return async (ctx, next) => {\r\n            let {idarr} = ctx.request.body\r\n\r\n            let arr = []\r\n            for(let id of idarr) {\r\n                if(id) {\r\n                    arr.push(ObjectId(id))\r\n                }\r\n            }\r\n\r\n            let params = {\r\n                conditions: {\r\n                    _id: {$in: arr}\r\n                },\r\n                updates: {\r\n                    status: 0\r\n                }\r\n            }\r\n\r\n            const sourceService = new Source()\r\n            await sourceService.delSource(params)\r\n            ctx.body = retMsg.getErrorNotice('SUCCESS')\r\n        }\r\n    }\r\n\r\n    this.sourceGet = function() {\r\n        return async (ctx, next) => {\r\n            let {id} = ctx.query\r\n\r\n            let params = {\r\n                id: id,\r\n                columns: {\r\n                    _id:1,\r\n                    name:1,\r\n                    column:1,\r\n                    url:1,\r\n                    description:1,\r\n                    created:1\r\n                }\r\n            }\r\n            const sourceService = new Source()\r\n\r\n            let result\r\n            let data = await sourceService.getSource(params)\r\n            if(data) {\r\n                result = _.assignIn({data:data}, retMsg.getErrorNotice('SUCCESS'))\r\n            } else {\r\n                result = _.assignIn({data:{}}, retMsg.getErrorNotice('SUCCESS'))\r\n            }\r\n            ctx.body = result\r\n        }\r\n    }\r\n\r\n    this.sourceUpdate = function() {\r\n        return async (ctx, next) => {\r\n            let {id, name, desc, column} = ctx.request.body\r\n\r\n            let params = {\r\n                conditions: {\r\n                    _id: ObjectId(id)\r\n                },\r\n                updates: {\r\n                    name: name,\r\n                    column: parseInt(column),\r\n                    description: desc,\r\n                    modified: new Date().getTime()\r\n                }\r\n            }\r\n\r\n            const sourceService = new Source()\r\n            await sourceService.updateSource(params)\r\n            ctx.body = retMsg.getErrorNotice('SUCCESS')\r\n        }\r\n    }\r\n}\r\n\r\nexport default SourceController"]}
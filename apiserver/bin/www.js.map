{"version":3,"sources":["../../apiserver_dev/bin/www.js"],"names":["models","server","createServer","callback","port","process","env","PORT","get","console","log","NODE_ENV","connect","connection","on","err","set","model","key","lowerFirst","listen","error","syscall","bind","code","exit","addr","address"],"mappings":";;;;AAIA,6B;AACA,4B;AACA,wB;AACA,gC;AACA,4B;AACA,gC;AACA,oC;AACA,mC,IAAYA,M,kYAXZ;;kbAYA,IAAMC,SAAS,eAAKC,YAAL,CAAkB,cAAIC,QAAJ,EAAlB,CAAf,CACA,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,iBAAOC,GAAP,CAAW,MAAX,CAAjC;;AAEA;;;;;AAKAC,QAAQC,GAAR,CAAY,wBAAZ,EAAsCL,QAAQC,GAAR,CAAYK,QAAlD;;AAEA,IAAIC,UAAU,SAAVA,OAAU,GAAW;AACrB,uBAASA,OAAT,CAAiB,iBAAOJ,GAAP,CAAW,aAAX,CAAjB,EAA4C,iBAAOA,GAAP,CAAW,iBAAX,CAA5C;AACH,CAFD;AAGAI;AACA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,WAAvB,EAAoC,oBAAML,QAAQC,GAAR,CAAY,iCAAZ,CAAN,EAApC;AACA,mBAASG,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,uBAAOL,QAAQC,GAAR,CAAY,+BAAZ,EAA6CK,GAA7C,CAAP,EAAhC;AACA,mBAASF,UAAT,CAAoBC,EAApB,CAAuB,cAAvB,EAAuCF,OAAvC;AACA,mBAASI,GAAT,CAAa,OAAb,EAAsB,iBAAOR,GAAP,CAAW,eAAX,CAAtB,E,CAAmD;AACnD,IAAIS,cAAJ,CAAWC,YAAX;AACA,KAAIA,GAAJ,IAAWlB,MAAX,EAAmB;AACfiB,YAAQ,iBAAEE,UAAF,CAAaD,GAAb,CAAR;AACA,uBAASD,KAAT,CAAeA,KAAf,EAAsBjB,OAAOkB,GAAP,CAAtB,EAAmC,OAAKD,KAAxC;;AAEH;;AAEDhB,OAAOmB,MAAP,CAAchB,IAAd;AACAH,OAAOa,EAAP,CAAU,OAAV,EAAmB,UAACO,KAAD,EAAW;AAC1B,QAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC5B,cAAMD,KAAN;AACH;AACD,QAAIE,OAAO,OAAOnB,IAAP,KAAgB,QAAhB,GAA2B,UAAUA,IAArC,GAA4C,UAAUA,IAAjE;AACA,YAAQiB,MAAMG,IAAd;AACI,aAAK,QAAL;AACIf,oBAAQC,GAAR,CAAYa,OAAO,+BAAnB;AACAlB,oBAAQoB,IAAR,CAAa,CAAb;AACA;AACJ,aAAK,YAAL;AACIhB,oBAAQC,GAAR,CAAYa,OAAO,oBAAnB;AACAlB,oBAAQoB,IAAR,CAAa,CAAb;AACA;AACJ;AACIhB,oBAAQC,GAAR,CAAYW,KAAZ;AACA,kBAAMA,KAAN,CAXR;;AAaH,CAlBD;AAmBApB,OAAOa,EAAP,CAAU,WAAV,EAAuB,YAAM;AACzB,QAAIY,OAAOzB,OAAO0B,OAAP,EAAX;AACA,QAAIJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GAA2B,UAAUA,IAArC,GAA4C,UAAUA,KAAKtB,IAAtE;AACAK,YAAQC,GAAR,CAAY,iBAAZ,EAA+Ba,IAA/B;AACH,CAJD","file":"www.js","sourcesContent":["/**\r\n * 项目启动入口文件\r\n */\r\n\r\nimport app from '../app'\r\nimport http from 'http'\r\nimport fs from 'fs'\r\nimport _ from 'lodash'\r\nimport path from 'path'\r\nimport config from 'config'\r\nimport mongoose from 'mongoose'\r\nimport * as models from '../models'\r\nconst server = http.createServer(app.callback())\r\nconst port = process.env.PORT || config.get(\"port\")\r\n\r\n/*\r\n    设置node环境变量：\r\n        windows下命令：set NODE_ENV = [development or production]\r\n        linux下命令：export NODE_ENV = [development or production]\r\n */\r\nconsole.log(\"current NODE_ENV is：%s\", process.env.NODE_ENV)\r\n\r\nlet connect = function() {\r\n    mongoose.connect(config.get(\"mongodb.url\"), config.get(\"mongodb.options\"))\r\n}\r\nconnect()\r\nmongoose.connection.on('connected', () => console.log('database is connect successfull'))\r\nmongoose.connection.on('error', err => console.log('database is connect failed：%s', err))\r\nmongoose.connection.on('disconnected', connect)\r\nmongoose.set('debug', config.get(\"mongodb.debug\")) // 生产上关闭数据库脚本调试\r\nlet model, key\r\nfor(key in models) {\r\n    model = _.lowerFirst(key)\r\n    mongoose.model(model, models[key], 't_'+model)\r\n\r\n}\r\n\r\nserver.listen(port)\r\nserver.on('error', (error) => {\r\n    if (error.syscall !== 'listen') {\r\n        throw error\r\n    }\r\n    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port\r\n    switch (error.code) {\r\n        case 'EACCES':\r\n            console.log(bind + ' requires elevated privileges')\r\n            process.exit(1)\r\n            break\r\n        case 'EADDRINUSE':\r\n            console.log(bind + ' is already in use')\r\n            process.exit(1)\r\n            break\r\n        default:\r\n            console.log(error)\r\n            throw error\r\n    }\r\n})\r\nserver.on('listening', () => {\r\n    let addr = server.address()\r\n    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port\r\n    console.log('Listening on %s', bind)\r\n})\r\n"]}
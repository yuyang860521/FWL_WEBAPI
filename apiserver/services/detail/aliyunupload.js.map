{"version":3,"sources":["../../../apiserver_dev/services/detail/aliyunupload.js"],"names":["ossStream","OSS","accessKeyId","get","secretAccessKey","endpoint","apiVersion","AliUpload","file","resolve","reject","upload","Bucket","Key","Date","getTime","parseInt","Math","random","extname","name","minPartSize","on","details","error","read","createReadStream","path","pipe"],"mappings":"6UAAA,uC;AACA,gC;AACA,iE;AACA,oC;AACA,4B;AACA,wB;;AAEA,IAAIA,YAAY,qCAAK,IAAI,oBAAIC,GAAR,CAAY;AAC9BC,iBAAa,iBAAOC,GAAP,CAAW,oBAAX,CADiB;AAE9BC,qBAAiB,iBAAOD,GAAP,CAAW,wBAAX,CAFa;AAG9BE,cAAU,iBAAOF,GAAP,CAAW,iBAAX,CAHoB;AAI9BG,gBAAY,iBAAOH,GAAP,CAAW,mBAAX,CAJkB,EAAZ,CAAL,CAAhB,C;;;AAOqBI,S;AACjB,yBAAc;AACb,K;;AAEUC,Y,EAAM;AACf,mBAAO,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,oBAAIC,SAASX,UAAUW,MAAV,CAAiB;AAC1BC,4BAAQ,iBAAOT,GAAP,CAAW,oBAAX,CADkB;AAE1BU,yBAAK,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,EAAvB,GAA4B,IAA5B,GAAiCC,SAASC,KAAKC,MAAL,KAAc,IAAvB,CAAjC,GAAgE,eAAKC,OAAL,CAAaX,KAAKY,IAAlB,CAF3C,EAAjB,CAAb;;AAIAT,uBAAOU,WAAP,CAAmB,iBAAOlB,GAAP,CAAW,oBAAX,CAAnB;;AAEAQ,uBAAOW,EAAP,CAAU,UAAV,EAAsB,UAACC,OAAD,EAAa;AAC/Bd,4BAAQc,OAAR;AACH,iBAFD;;AAIAZ,uBAAOW,EAAP,CAAU,OAAV,EAAmB,UAACE,KAAD,EAAW;AAC1Bd,2BAAOc,KAAP;AACH,iBAFD;;;AAKA,oBAAIC,OAAO,aAAGC,gBAAH,CAAoBlB,KAAKmB,IAAzB,CAAX;AACAF,qBAAKG,IAAL,CAAUjB,MAAV;AACD,aAnBM,CAAP;AAoBD,S,4CAzBgBJ,S","file":"aliyunupload.js","sourcesContent":["import ALY from 'aliyun-sdk'\r\nimport config from 'config'\r\nimport aous from 'aliyun-oss-upload-stream'\r\nimport promise from 'bluebird'\r\nimport path from 'path'\r\nimport fs from 'fs'\r\n\r\nlet ossStream = aous(new ALY.OSS({\r\n  \taccessKeyId: config.get('aliyun.accessKeyId'),\r\n  \tsecretAccessKey: config.get('aliyun.secretAccessKey'),\r\n  \tendpoint: config.get('aliyun.endpoint'),\r\n  \tapiVersion: config.get('aliyun.apiVersion')\r\n}))\r\n\r\nexport default class AliUpload {\r\n    constructor() {\r\n    }\r\n\r\n    uploadfile(file) {\r\n      return new promise((resolve, reject) => {\r\n\r\n        let upload = ossStream.upload({\r\n            Bucket: config.get('aliyun.bucket.name'),\r\n            Key: new Date().getTime() + \"\" + 1000+parseInt(Math.random()*9000) + path.extname(file.name)\r\n        })\r\n        upload.minPartSize(config.get('aliyun.minPartSize'))\r\n\r\n        upload.on('uploaded', (details) => {\r\n            resolve(details)\r\n        })\r\n\r\n        upload.on('error', (error) => {\r\n            reject(error)\r\n        })\r\n\r\n        \r\n        let read = fs.createReadStream(file.path)\r\n        read.pipe(upload)\r\n      })\r\n    }\r\n}"]}